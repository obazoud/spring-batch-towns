/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 */
package com.bazoud.springbatch.towns.webapp.web.domain;

import static com.bazoud.springbatch.towns.webapp.repository.support.PropertySelector.newPropertySelector;
import static com.bazoud.springbatch.towns.webapp.repository.support.Range.newRange;

import java.util.Date;

import javax.inject.Named;

import com.bazoud.springbatch.towns.webapp.domain.BatchJobExecution;
import com.bazoud.springbatch.towns.webapp.domain.BatchJobExecutionParams;
import com.bazoud.springbatch.towns.webapp.domain.BatchJobExecutionParams_;
import com.bazoud.springbatch.towns.webapp.repository.support.PropertySelector;
import com.bazoud.springbatch.towns.webapp.repository.support.Range;
import com.bazoud.springbatch.towns.webapp.repository.support.SearchParameters;
import com.bazoud.springbatch.towns.webapp.web.domain.support.GenericSearchForm;
import com.bazoud.springbatch.towns.webapp.web.faces.ConversationContextScoped;

/**
 * View Helper to search {@link BatchJobExecutionParams}.
 * It exposes a {@link BatchJobExecutionParams} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class BatchJobExecutionParamsSearchForm extends GenericSearchForm<BatchJobExecutionParams, Long, BatchJobExecutionParamsSearchForm> {
    private static final long serialVersionUID = 1L;
    protected BatchJobExecutionParams batchJobExecutionParams = new BatchJobExecutionParams();
    protected Range<BatchJobExecutionParams, Date> dateValRange = newRange(BatchJobExecutionParams_.dateVal);
    protected Range<BatchJobExecutionParams, Long> longValRange = newRange(BatchJobExecutionParams_.longVal);
    protected Range<BatchJobExecutionParams, Double> doubleValRange = newRange(BatchJobExecutionParams_.doubleVal);
    protected PropertySelector<BatchJobExecutionParams, Long> idSelector = newPropertySelector(BatchJobExecutionParams_.id);
    protected PropertySelector<BatchJobExecutionParams, String> typeCdSelector = newPropertySelector(BatchJobExecutionParams_.typeCd);
    protected PropertySelector<BatchJobExecutionParams, String> keyNameSelector = newPropertySelector(BatchJobExecutionParams_.keyName);
    protected PropertySelector<BatchJobExecutionParams, String> stringValSelector = newPropertySelector(BatchJobExecutionParams_.stringVal);
    protected PropertySelector<BatchJobExecutionParams, Long> longValSelector = newPropertySelector(BatchJobExecutionParams_.longVal);
    protected PropertySelector<BatchJobExecutionParams, Double> doubleValSelector = newPropertySelector(BatchJobExecutionParams_.doubleVal);
    protected PropertySelector<BatchJobExecutionParams, String> identifyingSelector = newPropertySelector(BatchJobExecutionParams_.identifying);
    protected PropertySelector<BatchJobExecutionParams, BatchJobExecution> batchJobExecutionSelector = newPropertySelector(BatchJobExecutionParams_.batchJobExecution);

    public BatchJobExecutionParams getBatchJobExecutionParams() {
        return batchJobExecutionParams;
    }

    @Override
    protected BatchJobExecutionParams getEntity() {
        return getBatchJobExecutionParams();
    }

    @Override
    public BatchJobExecutionParamsSearchForm newInstance() {
        return new BatchJobExecutionParamsSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.range(dateValRange, longValRange, doubleValRange);
        sp.property(idSelector, typeCdSelector, keyNameSelector, stringValSelector, longValSelector, doubleValSelector, identifyingSelector);
        sp.property(batchJobExecutionSelector);
        return sp;
    }

    @Override
    public void resetWithOther(BatchJobExecutionParamsSearchForm other) {
        this.batchJobExecutionParams = other.getBatchJobExecutionParams();
        this.dateValRange = other.getDateValRange();
        this.longValRange = other.getLongValRange();
        this.doubleValRange = other.getDoubleValRange();
        this.idSelector = other.getIdSelector();
        this.typeCdSelector = other.getTypeCdSelector();
        this.keyNameSelector = other.getKeyNameSelector();
        this.stringValSelector = other.getStringValSelector();
        this.longValSelector = other.getLongValSelector();
        this.doubleValSelector = other.getDoubleValSelector();
        this.identifyingSelector = other.getIdentifyingSelector();
        this.batchJobExecutionSelector = other.getBatchJobExecutionSelector();
    }

    // Ranges
    public Range<BatchJobExecutionParams, Date> getDateValRange() {
        return dateValRange;
    }

    public Range<BatchJobExecutionParams, Long> getLongValRange() {
        return longValRange;
    }

    public Range<BatchJobExecutionParams, Double> getDoubleValRange() {
        return doubleValRange;
    }

    // Property selectors
    public PropertySelector<BatchJobExecutionParams, Long> getIdSelector() {
        return idSelector;
    }

    public PropertySelector<BatchJobExecutionParams, String> getTypeCdSelector() {
        return typeCdSelector;
    }

    public PropertySelector<BatchJobExecutionParams, String> getKeyNameSelector() {
        return keyNameSelector;
    }

    public PropertySelector<BatchJobExecutionParams, String> getStringValSelector() {
        return stringValSelector;
    }

    public PropertySelector<BatchJobExecutionParams, Long> getLongValSelector() {
        return longValSelector;
    }

    public PropertySelector<BatchJobExecutionParams, Double> getDoubleValSelector() {
        return doubleValSelector;
    }

    public PropertySelector<BatchJobExecutionParams, String> getIdentifyingSelector() {
        return identifyingSelector;
    }

    // Relation selectors
    public PropertySelector<BatchJobExecutionParams, BatchJobExecution> getBatchJobExecutionSelector() {
        return batchJobExecutionSelector;
    }
}
