/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-jsf2-spring-conversation:src/main/java/domain/ExcelExporter.e.vm.java
 */
package com.bazoud.springbatch.towns.webapp.web.domain;

import javax.inject.Inject;
import javax.inject.Named;

import com.bazoud.springbatch.towns.webapp.domain.BatchStepExecution;
import com.bazoud.springbatch.towns.webapp.web.domain.support.GenericExcelExporter;
import com.bazoud.springbatch.towns.webapp.web.faces.ConversationContextScoped;

/**
 * Exports to excel document {@link BatchStepExecution} search criteria and result. 
 */
@Named
@ConversationContextScoped
public class BatchStepExecutionExcelExporter extends GenericExcelExporter<BatchStepExecution> {
    @Inject
    protected BatchStepExecutionSearchForm sf;

    public BatchStepExecutionExcelExporter() {
        super("batchStepExecution_id", "batchStepExecution_stepName", "batchStepExecution_startTime", "batchStepExecution_endTime",
                "batchStepExecution_status", "batchStepExecution_commitCount");
    }

    @Override
    protected void fillResultItem(int row, BatchStepExecution item) {
        int col = 0;
        setValue(row, col++, item.getId());
        setValue(row, col++, item.getStepName());
        setDateTime(row, col++, item.getStartTime());
        setDateTime(row, col++, item.getEndTime());
        setValue(row, col++, item.getStatus());
        setValue(row, col++, item.getCommitCount());
    }

    @Override
    public void fillSearchCriteria(int row) {
        useCriteriaSheet();

        setLeftHeader(row, 0, "batchStepExecution_id");
        setValue(row++, 1, sf.getBatchStepExecution().getId());
        setSelector(row++, 0, "batchStepExecution_stepName", sf.getStepNameSelector());
        setSelectedEntities(row++, 0, "batchStepExecution_jobExecution", sf.getJobExecutionSelector().getSelected());
        setRangeDateTime(row++, 0, "batchStepExecution_startTime", sf.getStartTimeRange());
        setRangeDateTime(row++, 0, "batchStepExecution_endTime", sf.getEndTimeRange());
        setSelector(row++, 0, "batchStepExecution_status", sf.getStatusSelector());
        setRangeNumber(row++, 0, "batchStepExecution_commitCount", sf.getCommitCountRange());
        setRangeNumber(row++, 0, "batchStepExecution_readCount", sf.getReadCountRange());
        setRangeNumber(row++, 0, "batchStepExecution_filterCount", sf.getFilterCountRange());
        setRangeNumber(row++, 0, "batchStepExecution_writeCount", sf.getWriteCountRange());
        setRangeNumber(row++, 0, "batchStepExecution_readSkipCount", sf.getReadSkipCountRange());
        setRangeNumber(row++, 0, "batchStepExecution_writeSkipCount", sf.getWriteSkipCountRange());
        setRangeNumber(row++, 0, "batchStepExecution_processSkipCount", sf.getProcessSkipCountRange());
        setRangeNumber(row++, 0, "batchStepExecution_rollbackCount", sf.getRollbackCountRange());
        setSelector(row++, 0, "batchStepExecution_exitCode", sf.getExitCodeSelector());
        setSelector(row++, 0, "batchStepExecution_exitMessage", sf.getExitMessageSelector());
        setRangeDateTime(row++, 0, "batchStepExecution_lastUpdated", sf.getLastUpdatedRange());
    }
}