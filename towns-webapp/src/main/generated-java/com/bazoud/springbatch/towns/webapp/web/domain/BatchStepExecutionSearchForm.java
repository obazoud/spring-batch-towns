/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 */
package com.bazoud.springbatch.towns.webapp.web.domain;

import static com.bazoud.springbatch.towns.webapp.repository.support.PropertySelector.newPropertySelector;
import static com.bazoud.springbatch.towns.webapp.repository.support.Range.newRange;

import java.util.Date;

import javax.inject.Named;

import com.bazoud.springbatch.towns.webapp.domain.BatchJobExecution;
import com.bazoud.springbatch.towns.webapp.domain.BatchStepExecution;
import com.bazoud.springbatch.towns.webapp.domain.BatchStepExecution_;
import com.bazoud.springbatch.towns.webapp.repository.support.PropertySelector;
import com.bazoud.springbatch.towns.webapp.repository.support.Range;
import com.bazoud.springbatch.towns.webapp.repository.support.SearchParameters;
import com.bazoud.springbatch.towns.webapp.web.domain.support.GenericSearchForm;
import com.bazoud.springbatch.towns.webapp.web.faces.ConversationContextScoped;

/**
 * View Helper to search {@link BatchStepExecution}.
 * It exposes a {@link BatchStepExecution} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class BatchStepExecutionSearchForm extends GenericSearchForm<BatchStepExecution, Long, BatchStepExecutionSearchForm> {
    private static final long serialVersionUID = 1L;
    protected BatchStepExecution batchStepExecution = new BatchStepExecution();
    protected Range<BatchStepExecution, Date> startTimeRange = newRange(BatchStepExecution_.startTime);
    protected Range<BatchStepExecution, Date> endTimeRange = newRange(BatchStepExecution_.endTime);
    protected Range<BatchStepExecution, Long> commitCountRange = newRange(BatchStepExecution_.commitCount);
    protected Range<BatchStepExecution, Long> readCountRange = newRange(BatchStepExecution_.readCount);
    protected Range<BatchStepExecution, Long> filterCountRange = newRange(BatchStepExecution_.filterCount);
    protected Range<BatchStepExecution, Long> writeCountRange = newRange(BatchStepExecution_.writeCount);
    protected Range<BatchStepExecution, Long> readSkipCountRange = newRange(BatchStepExecution_.readSkipCount);
    protected Range<BatchStepExecution, Long> writeSkipCountRange = newRange(BatchStepExecution_.writeSkipCount);
    protected Range<BatchStepExecution, Long> processSkipCountRange = newRange(BatchStepExecution_.processSkipCount);
    protected Range<BatchStepExecution, Long> rollbackCountRange = newRange(BatchStepExecution_.rollbackCount);
    protected Range<BatchStepExecution, Date> lastUpdatedRange = newRange(BatchStepExecution_.lastUpdated);
    protected PropertySelector<BatchStepExecution, Long> idSelector = newPropertySelector(BatchStepExecution_.id);
    protected PropertySelector<BatchStepExecution, String> stepNameSelector = newPropertySelector(BatchStepExecution_.stepName);
    protected PropertySelector<BatchStepExecution, String> statusSelector = newPropertySelector(BatchStepExecution_.status);
    protected PropertySelector<BatchStepExecution, Long> commitCountSelector = newPropertySelector(BatchStepExecution_.commitCount);
    protected PropertySelector<BatchStepExecution, Long> readCountSelector = newPropertySelector(BatchStepExecution_.readCount);
    protected PropertySelector<BatchStepExecution, Long> filterCountSelector = newPropertySelector(BatchStepExecution_.filterCount);
    protected PropertySelector<BatchStepExecution, Long> writeCountSelector = newPropertySelector(BatchStepExecution_.writeCount);
    protected PropertySelector<BatchStepExecution, Long> readSkipCountSelector = newPropertySelector(BatchStepExecution_.readSkipCount);
    protected PropertySelector<BatchStepExecution, Long> writeSkipCountSelector = newPropertySelector(BatchStepExecution_.writeSkipCount);
    protected PropertySelector<BatchStepExecution, Long> processSkipCountSelector = newPropertySelector(BatchStepExecution_.processSkipCount);
    protected PropertySelector<BatchStepExecution, Long> rollbackCountSelector = newPropertySelector(BatchStepExecution_.rollbackCount);
    protected PropertySelector<BatchStepExecution, String> exitCodeSelector = newPropertySelector(BatchStepExecution_.exitCode);
    protected PropertySelector<BatchStepExecution, String> exitMessageSelector = newPropertySelector(BatchStepExecution_.exitMessage);
    protected PropertySelector<BatchStepExecution, BatchJobExecution> jobExecutionSelector = newPropertySelector(BatchStepExecution_.jobExecution);

    public BatchStepExecution getBatchStepExecution() {
        return batchStepExecution;
    }

    @Override
    protected BatchStepExecution getEntity() {
        return getBatchStepExecution();
    }

    @Override
    public BatchStepExecutionSearchForm newInstance() {
        return new BatchStepExecutionSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.range(startTimeRange, endTimeRange, commitCountRange, readCountRange, filterCountRange, writeCountRange, readSkipCountRange, writeSkipCountRange,
                processSkipCountRange, rollbackCountRange, lastUpdatedRange);
        sp.property(idSelector, stepNameSelector, statusSelector, commitCountSelector, readCountSelector, filterCountSelector, writeCountSelector,
                readSkipCountSelector, writeSkipCountSelector, processSkipCountSelector, rollbackCountSelector, exitCodeSelector, exitMessageSelector);
        sp.property(jobExecutionSelector);
        return sp;
    }

    @Override
    public void resetWithOther(BatchStepExecutionSearchForm other) {
        this.batchStepExecution = other.getBatchStepExecution();
        this.startTimeRange = other.getStartTimeRange();
        this.endTimeRange = other.getEndTimeRange();
        this.commitCountRange = other.getCommitCountRange();
        this.readCountRange = other.getReadCountRange();
        this.filterCountRange = other.getFilterCountRange();
        this.writeCountRange = other.getWriteCountRange();
        this.readSkipCountRange = other.getReadSkipCountRange();
        this.writeSkipCountRange = other.getWriteSkipCountRange();
        this.processSkipCountRange = other.getProcessSkipCountRange();
        this.rollbackCountRange = other.getRollbackCountRange();
        this.lastUpdatedRange = other.getLastUpdatedRange();
        this.idSelector = other.getIdSelector();
        this.stepNameSelector = other.getStepNameSelector();
        this.statusSelector = other.getStatusSelector();
        this.commitCountSelector = other.getCommitCountSelector();
        this.readCountSelector = other.getReadCountSelector();
        this.filterCountSelector = other.getFilterCountSelector();
        this.writeCountSelector = other.getWriteCountSelector();
        this.readSkipCountSelector = other.getReadSkipCountSelector();
        this.writeSkipCountSelector = other.getWriteSkipCountSelector();
        this.processSkipCountSelector = other.getProcessSkipCountSelector();
        this.rollbackCountSelector = other.getRollbackCountSelector();
        this.exitCodeSelector = other.getExitCodeSelector();
        this.exitMessageSelector = other.getExitMessageSelector();
        this.jobExecutionSelector = other.getJobExecutionSelector();
    }

    // Ranges
    public Range<BatchStepExecution, Date> getStartTimeRange() {
        return startTimeRange;
    }

    public Range<BatchStepExecution, Date> getEndTimeRange() {
        return endTimeRange;
    }

    public Range<BatchStepExecution, Long> getCommitCountRange() {
        return commitCountRange;
    }

    public Range<BatchStepExecution, Long> getReadCountRange() {
        return readCountRange;
    }

    public Range<BatchStepExecution, Long> getFilterCountRange() {
        return filterCountRange;
    }

    public Range<BatchStepExecution, Long> getWriteCountRange() {
        return writeCountRange;
    }

    public Range<BatchStepExecution, Long> getReadSkipCountRange() {
        return readSkipCountRange;
    }

    public Range<BatchStepExecution, Long> getWriteSkipCountRange() {
        return writeSkipCountRange;
    }

    public Range<BatchStepExecution, Long> getProcessSkipCountRange() {
        return processSkipCountRange;
    }

    public Range<BatchStepExecution, Long> getRollbackCountRange() {
        return rollbackCountRange;
    }

    public Range<BatchStepExecution, Date> getLastUpdatedRange() {
        return lastUpdatedRange;
    }

    // Property selectors
    public PropertySelector<BatchStepExecution, Long> getIdSelector() {
        return idSelector;
    }

    public PropertySelector<BatchStepExecution, String> getStepNameSelector() {
        return stepNameSelector;
    }

    public PropertySelector<BatchStepExecution, String> getStatusSelector() {
        return statusSelector;
    }

    public PropertySelector<BatchStepExecution, Long> getCommitCountSelector() {
        return commitCountSelector;
    }

    public PropertySelector<BatchStepExecution, Long> getReadCountSelector() {
        return readCountSelector;
    }

    public PropertySelector<BatchStepExecution, Long> getFilterCountSelector() {
        return filterCountSelector;
    }

    public PropertySelector<BatchStepExecution, Long> getWriteCountSelector() {
        return writeCountSelector;
    }

    public PropertySelector<BatchStepExecution, Long> getReadSkipCountSelector() {
        return readSkipCountSelector;
    }

    public PropertySelector<BatchStepExecution, Long> getWriteSkipCountSelector() {
        return writeSkipCountSelector;
    }

    public PropertySelector<BatchStepExecution, Long> getProcessSkipCountSelector() {
        return processSkipCountSelector;
    }

    public PropertySelector<BatchStepExecution, Long> getRollbackCountSelector() {
        return rollbackCountSelector;
    }

    public PropertySelector<BatchStepExecution, String> getExitCodeSelector() {
        return exitCodeSelector;
    }

    public PropertySelector<BatchStepExecution, String> getExitMessageSelector() {
        return exitMessageSelector;
    }

    // Relation selectors
    public PropertySelector<BatchStepExecution, BatchJobExecution> getJobExecutionSelector() {
        return jobExecutionSelector;
    }
}
