--
-- (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
-- Source code generated by Celerio, a Jaxio product
-- Want to purchase Celerio ? email us at info@jaxio.com
-- Follow us on twitter: @springfuse
-- Documentation: http://www.jaxio.com/documentation/celerio/
-- Template pack-backend-jpa:src/main/sql/h2/01-create.p.vm.sql
--

DROP ALL objects;


-- =================================
-- TABLE BATCH_JOB_EXECUTION 
-- =================================

CREATE TABLE BATCH_JOB_EXECUTION (
	JOB_EXECUTION_ID BIGINT(19) not null,
	VERSION BIGINT(19),
	JOB_INSTANCE_ID BIGINT(19) not null,
	CREATE_TIME TIMESTAMP not null,
	START_TIME TIMESTAMP,
	END_TIME TIMESTAMP,
	STATUS VARCHAR(10),
	EXIT_CODE VARCHAR(100),
	EXIT_MESSAGE VARCHAR(2500),
	LAST_UPDATED TIMESTAMP);

CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY ON BATCH_JOB_EXECUTION (JOB_EXECUTION_ID);
ALTER TABLE BATCH_JOB_EXECUTION ALTER COLUMN JOB_EXECUTION_ID IDENTITY;


-- =================================
-- TABLE BATCH_JOB_EXECUTION_CONTEXT 
-- =================================

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT (
	JOB_EXECUTION_ID BIGINT(19) not null,
	SHORT_CONTEXT VARCHAR(2500) not null,
	SERIALIZED_CONTEXT LONGVARCHAR(65535));

CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY ON BATCH_JOB_EXECUTION_CONTEXT (JOB_EXECUTION_ID);
ALTER TABLE BATCH_JOB_EXECUTION_CONTEXT ALTER COLUMN JOB_EXECUTION_ID IDENTITY;


-- =================================
-- TABLE BATCH_JOB_EXECUTION_PARAMS 
-- =================================

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS (
	JOB_EXECUTION_ID BIGINT(19) not null,
	TYPE_CD VARCHAR(6) not null,
	KEY_NAME VARCHAR(100) not null,
	STRING_VAL VARCHAR(250),
	DATE_VAL TIMESTAMP,
	LONG_VAL BIGINT(19),
	DOUBLE_VAL DOUBLE(22),
	IDENTIFYING CHAR(1) not null);


-- =================================
-- TABLE BATCH_JOB_EXECUTION_SEQ 
-- =================================

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
	ID BIGINT(19) not null);


-- =================================
-- TABLE BATCH_JOB_INSTANCE 
-- =================================

CREATE TABLE BATCH_JOB_INSTANCE (
	JOB_INSTANCE_ID BIGINT(19) not null,
	VERSION BIGINT(19),
	JOB_NAME VARCHAR(100) not null,
	JOB_KEY VARCHAR(32) not null);

CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY ON BATCH_JOB_INSTANCE (JOB_INSTANCE_ID);
CREATE UNIQUE INDEX IF NOT EXISTS JOB_INST_UN ON BATCH_JOB_INSTANCE (JOB_NAME, JOB_KEY);
ALTER TABLE BATCH_JOB_INSTANCE ALTER COLUMN JOB_INSTANCE_ID IDENTITY;


-- =================================
-- TABLE BATCH_JOB_SEQ 
-- =================================

CREATE TABLE BATCH_JOB_SEQ (
	ID BIGINT(19) not null);


-- =================================
-- TABLE BATCH_STEP_EXECUTION 
-- =================================

CREATE TABLE BATCH_STEP_EXECUTION (
	STEP_EXECUTION_ID BIGINT(19) not null,
	VERSION BIGINT(19) not null,
	STEP_NAME VARCHAR(100) not null,
	JOB_EXECUTION_ID BIGINT(19) not null,
	START_TIME TIMESTAMP not null,
	END_TIME TIMESTAMP,
	STATUS VARCHAR(10),
	COMMIT_COUNT BIGINT(19),
	READ_COUNT BIGINT(19),
	FILTER_COUNT BIGINT(19),
	WRITE_COUNT BIGINT(19),
	READ_SKIP_COUNT BIGINT(19),
	WRITE_SKIP_COUNT BIGINT(19),
	PROCESS_SKIP_COUNT BIGINT(19),
	ROLLBACK_COUNT BIGINT(19),
	EXIT_CODE VARCHAR(100),
	EXIT_MESSAGE VARCHAR(2500),
	LAST_UPDATED TIMESTAMP);

CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY ON BATCH_STEP_EXECUTION (STEP_EXECUTION_ID);
ALTER TABLE BATCH_STEP_EXECUTION ALTER COLUMN STEP_EXECUTION_ID IDENTITY;


-- =================================
-- TABLE BATCH_STEP_EXECUTION_CONTEXT 
-- =================================

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT (
	STEP_EXECUTION_ID BIGINT(19) not null,
	SHORT_CONTEXT VARCHAR(2500) not null,
	SERIALIZED_CONTEXT LONGVARCHAR(65535));

CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY ON BATCH_STEP_EXECUTION_CONTEXT (STEP_EXECUTION_ID);
ALTER TABLE BATCH_STEP_EXECUTION_CONTEXT ALTER COLUMN STEP_EXECUTION_ID IDENTITY;


-- =================================
-- TABLE BATCH_STEP_EXECUTION_SEQ 
-- =================================

CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
	ID BIGINT(19) not null);


-- =================================
-- TABLE DEPARTMENT 
-- =================================

CREATE TABLE DEPARTMENT (
	ID INTEGER(10) not null default 0,
	CODE VARCHAR(3) not null,
	NAME VARCHAR(255) not null,
	NAME_UPPERCASE VARCHAR(255) not null);

CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY ON DEPARTMENT (ID);
ALTER TABLE DEPARTMENT ALTER COLUMN ID IDENTITY;


-- =================================
-- TABLE TOWN 
-- =================================

CREATE TABLE TOWN (
	ID INTEGER(10) not null default 0,
	DEPARTMENT VARCHAR(3) not null,
	NAME VARCHAR(45) not null,
	NAME_REAL VARCHAR(45) not null,
	POSTCODE VARCHAR(255) not null,
	POPULATION INTEGER(10),
	AREA INTEGER(10),
	LONGITUDE_DEG VARCHAR(12),
	LATITUDE_DEG VARCHAR(12),
	LONGITUDE_GRD VARCHAR(12),
	LATITUDE_GRD VARCHAR(12),
	LONGITUDE_DMS VARCHAR(12),
	LATITUDE_DMS VARCHAR(12),
	ZMIN INTEGER(10),
	ZMAX INTEGER(10));

CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY ON TOWN (ID);
ALTER TABLE TOWN ALTER COLUMN ID IDENTITY;

ALTER TABLE BATCH_JOB_EXECUTION ADD CONSTRAINT JOB_INST_EXEC_FK FOREIGN KEY (JOB_INSTANCE_ID) REFERENCES BATCH_JOB_INSTANCE (JOB_INSTANCE_ID);
ALTER TABLE BATCH_JOB_EXECUTION_CONTEXT ADD CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION (JOB_EXECUTION_ID);
ALTER TABLE BATCH_JOB_EXECUTION_PARAMS ADD CONSTRAINT JOB_EXEC_PARAMS_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION (JOB_EXECUTION_ID);
ALTER TABLE BATCH_STEP_EXECUTION ADD CONSTRAINT JOB_EXEC_STEP_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION (JOB_EXECUTION_ID);
ALTER TABLE BATCH_STEP_EXECUTION_CONTEXT ADD CONSTRAINT STEP_EXEC_CTX_FK FOREIGN KEY (STEP_EXECUTION_ID) REFERENCES BATCH_STEP_EXECUTION (STEP_EXECUTION_ID);